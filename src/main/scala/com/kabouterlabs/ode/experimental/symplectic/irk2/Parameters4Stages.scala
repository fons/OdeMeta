package com.kabouterlabs.ode.experimental.symplectic.irk2
/**
  * Created by fons on 5/25/17.
  */
/*
IF (NS.EQ.4) THEN
         C(1)= 0.69431844202973712388E-01
         C(2)= 0.33000947820757186760E+00
         C(3)= 0.66999052179242813240E+00
         C(4)= 0.93056815579702628761E+00
         B(1)= 0.17392742256872692869E+00
         B(2)= 0.32607257743127307131E+00
         B(3)= 0.32607257743127307131E+00
         B(4)= 0.17392742256872692869E+00
         BC(1)= 0.16185132086231030665E+00
         BC(2)= 0.21846553629538057030E+00
         BC(3)= 0.10760704113589250101E+00
         BC(4)= 0.12076101706416622036E-01
         aa(0)(1)= 0.40381914508467311298E-02
         aa(0)(2)= -0.32958609449446961650E-02
         aa(0)(3)= 0.26447829520668538006E-02
         aa(0)(4)= -0.97672296325588161023E-03
         aa(1)(1)= 0.43563580902396261254E-01
         aa(1)(2)= 0.13818951406296126013E-01
         aa(1)(3)= -0.43401341944349953440E-02
         aa(1)(4)= 0.14107297391595337720E-02
         aa(2)(1)= 0.10586435263357640763E+00
         aa(2)(2)= 0.10651836096505307395E+00
         aa(2)(3)= 0.13818951406296126013E-01
         aa(2)(4)= -0.17580153590805494993E-02
         aa(3)(1)= 0.14879849619263780300E+00
         aa(3)(2)= 0.19847049885237718995E+00
         aa(3)(3)= 0.81671359795877570687E-01
         aa(3)(4)= 0.40381914508467311298E-02
         E(1,1)= -0.21272768296134340207E-01
         E(1,2)= 0.11059138674756969912E-01
         E(1,3)= 0.38999255049973564023E-02
         E(1,4)= -0.43986226789008967612E-01
         E(1,5)= 0.13581590305438849621E-01
         E(1,6)= 0.39922421675314269059E-01
         E(1,7)= -0.79369058065113002021E-03
         E(2,1)= -0.75671119283734809953E-02
         E(2,2)= 0.10209394000843457002E-01
         E(2,3)= -0.12880197817980892596E-01
         E(2,4)= -0.56381316813776501277E-01
         E(2,5)= 0.37440782682669799960E-02
         E(2,6)= 0.11522469441011273193E+00
         E(2,7)= 0.21035877343246316334E-02
         E(3,1)= -0.39890571772473709759E+00
         E(3,2)= 0.26819725655216894347E+00
         E(3,3)= -0.82551711648854471247E-01
         E(3,4)= -0.85516559106259630212E+00
         E(3,5)= 0.24433810515772642570E+00
         E(3,6)= 0.10234155624049009806E+01
         E(3,7)= 0.25115745967236579242E-01
         E(4,1)= -0.40964796048052939224E+00
         E(4,2)= 0.29949323098224574487E+00
         E(4,3)= -0.13867460566101912494E+00
         E(4,4)= -0.98859300714628940382E+00
         E(4,5)= 0.24671351779481625627E+00
         E(4,6)= 0.12912760231350872304E+01
         E(4,7)= 0.13241134766742798418E+00
         SM(1)= 0.00000000000000000000E+00
         SM(2)= 0.10000000000000000000E+01
         SM(3)= 0.16500000000000000000E+01
         AM(1)= 0.10806374869244001787E+04
         AM(2)= -0.66008818661284690206E+03
         AM(3)= 0.61810154357557529566E+03
         AM(4)= -0.31341427826212857229E+03
         AM(5)= -0.10187174765625000000E+02
         AM(6)= 0.31173050390625000000E+02
         AM(7)= 0.00000000000000000000E+00
 */
case class Parameters4Stages(hstep:Double)  extends ParametersBase
{
  val ns = 4
  private val hstep2 = hstep * hstep
  val nsd  = 6

  
  val C = Array(
  0.69431844202973712388E-01,
  0.33000947820757186760E+00,
  0.66999052179242813240E+00,
  0.93056815579702628761E+00).map(_ * hstep)

  val B = Array(
  0.17392742256872692869E+00,
  0.32607257743127307131E+00,
  0.32607257743127307131E+00,
  0.17392742256872692869E+00).map(_*hstep)

  val BC = Array(
  0.16185132086231030665E+00,
  0.21846553629538057030E+00,
  0.10760704113589250101E+00,
  0.12076101706416622036E-01).map(_*hstep2)
  
  
  val AA = {
    val aa = Array.ofDim[Double](ns, ns)
    aa(0)(0) = 0.40381914508467311298E-02
    aa(0)(1) = -0.32958609449446961650E-02
    aa(0)(2) = 0.26447829520668538006E-02
    aa(0)(3) = -0.97672296325588161023E-03
    aa(1)(0) = 0.43563580902396261254E-01
    aa(1)(1) = 0.13818951406296126013E-01
    aa(1)(2) = -0.43401341944349953440E-02
    aa(1)(3) = 0.14107297391595337720E-02
    aa(2)(0) = 0.10586435263357640763E+00
    aa(2)(1) = 0.10651836096505307395E+00
    aa(2)(2) = 0.13818951406296126013E-01
    aa(2)(3) = -0.17580153590805494993E-02
    aa(3)(0) = 0.14879849619263780300E+00
    aa(3)(1) = 0.19847049885237718995E+00
    aa(3)(2) = 0.81671359795877570687E-01
    aa(3)(3) = 0.40381914508467311298E-02
    aa.map(_.map(_ * hstep2))
  }
  val E = {
    val e = Array.ofDim[Double](ns, ns+nm)
    e(0)(0) = - 0.21272768296134340207E-01
    e(0)(1) = 0.11059138674756969912E-01
    e(0)(2) = 0.38999255049973564023E-02
    e(0)(3) = - 0.43986226789008967612E-01
    e(0)(4) = 0.13581590305438849621E-01
    e(0)(5) = 0.39922421675314269059E-01
    e(0)(6) = - 0.79369058065113002021E-03
    e(1)(0) = - 0.75671119283734809953E-02
    e(1)(1) = 0.10209394000843457002E-01
    e(1)(2) = - 0.12880197817980892596E-01
    e(1)(3) = - 0.56381316813776501277E-01
    e(1)(4) = 0.37440782682669799960E-02
    e(1)(5) = 0.11522469441011273193E+00
    e(1)(6) = 0.21035877343246316334E-02
    e(2)(0) = - 0.39890571772473709759E+00
    e(2)(1) = 0.26819725655216894347E+00
    e(2)(2) = - 0.82551711648854471247E-01
    e(2)(3) = - 0.85516559106259630212E+00
    e(2)(4) = 0.24433810515772642570E+00
    e(2)(5) = 0.10234155624049009806E+01
    e(2)(6) = 0.25115745967236579242E-01
    e(3)(0) = - 0.40964796048052939224E+00
    e(3)(1) = 0.29949323098224574487E+00
    e(3)(2) = - 0.13867460566101912494E+00
    e(3)(3) = - 0.98859300714628940382E+00
    e(3)(4) = 0.24671351779481625627E+00
    e(3)(5) = 0.12912760231350872304E+01
    e(3)(6) = 0.13241134766742798418E+00
    e.map(_.map(_ * hstep2))
  }
  val SM = Array(
    0.00000000000000000000E+00,
    0.10000000000000000000E+01,
    0.16500000000000000000E+01)

  val AM = Array(
    0.10806374869244001787E+04,
    -0.66008818661284690206E+03,
    0.61810154357557529566E+03,
    -0.31341427826212857229E+03,
    -0.10187174765625000000E+02,
    0.31173050390625000000E+02,
    0.00000000000000000000E+00).zipWithIndex.map( x => if (x._2 < 2) x._1 else x._1*hstep )
  
}
